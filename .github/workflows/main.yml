name: CI

on:
  pull_request:
    branches:
    - master
  push:
    branches:
    - master

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ['3.6', '3.7']

    steps:
    - uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python }}

    - uses: actions/cache@v1
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ runner.os }}-pydeps-${{ matrix.python }}-${{ hashFiles('setup.py') }}-${{ hashFiles('dev-requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pydeps-${{ matrix.python }}

    - name: Install requirements
      run: |
        pip install --upgrade pip setuptools wheel
        pip install -e .
        pip install --upgrade -r dev-requirements.txt

    - name: Debug info
      run: |
        pip freeze

    - name: Lint
      run: |
        make lint

    - name: Type check
      run: |
        make typecheck

    - name: Run tests
      run: |
        make test-with-cov

    # TODO: remove codecov report publishing from TeamCity build and then uncomment this:
    # - name: Upload coverage to Codecov
    #   if: matrix.python == '3.7'
    #   run: |
    #     # Ignore codecov failures as the codecov server is not
    #     # very reliable but we don't want to report a failure
    #     # in the github UI just because the coverage report failed to
    #     # be published.
    #     codecov || echo "codecov upload failed"
    #   env:
    #     CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  models:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ['3.6', '3.7']

    steps:
    - uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python }}

    - uses: actions/cache@v1
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ runner.os }}-pydeps-${{ matrix.python }}-${{ hashFiles('setup.py') }}-${{ hashFiles('dev-requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pydeps-${{ matrix.python }}

    - name: Install requirements
      run: |
        pip install --upgrade pip setuptools wheel
        pip install -e .
        pip install --upgrade -r dev-requirements.txt

    - name: Debug info
      run: |
        pip freeze

    - name: Pull and install models repo
      env:
        EXCLUDE_ALLENNLP_IN_SETUP: "true"
      run: |
        git clone https://github.com/allenai/allennlp-models.git
        cd allennlp-models && pip install -e . && pip install -r dev-requirements.txt

    - name: Run models tests
      run: |
        cd allennlp-models && make test

    - name: Clean up
      run: |
        # Don't want this in the cache since the other workflow uses same cache.
        pip uninstall --yes allennlp_models

  docs:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ['3.7']  # no need to build against multiple versions.

    steps:
    - uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python }}

    - uses: actions/cache@v1
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ runner.os }}-pydeps-${{ matrix.python }}-${{ hashFiles('setup.py') }}-${{ hashFiles('dev-requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pydeps-${{ matrix.python }}

    - name: Install requirements
      run: |
        pip install --upgrade pip setuptools wheel
        pip install -e .
        pip install --upgrade -r dev-requirements.txt

    - name: Debug info
      run: |
        pip freeze

    - name: Build docs
      run: |
        ./scripts/build_docs.sh

    - name: Deploy docs
      # Only run this step on master branch of "allenai/allennlp".
      if: github.repository == 'allenai/allennlp' && github.ref == 'master'
      run: |
        # TODO:
        echo "Deploying docs"

  # Builds image created with a pip installation at the corresponding commit.
  docker:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Build and push
      uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: allennlp/commit
        dockerfile: Dockerfile.pip
        tags: ${{ github.event.pull_request.head.sha }}
        always_pull: true
        build_args: SOURCE_COMMIT=${{ github.event.pull_request.head.sha }}
        # Only push on master branch of "allenai/allennlp".
        push: ${{ github.repository == 'allenai/allennlp' && github.ref == 'master' }}
