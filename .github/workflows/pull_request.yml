name: PR

on:
  pull_request:
    branches:
    - master

jobs:
  changelog:
    name: CHANGELOG
    runs-on: ubuntu-latest

    steps:
    # Note that checkout@v2 will not work with the git command below!
    - uses: actions/checkout@v1

    - name: Debugging info
      run: |
        git remote -v

    - name: Check that CHANGELOG has been updated
      run: |
        # If this step fails, this means you haven't updated the CHANGELOG.md
        # file with notes on your contribution.
        git diff --name-only $(git merge-base origin/master HEAD) | grep '^CHANGELOG.md$' && echo "Thanks for helping keep our CHANGELOG up-to-date!"

  gpu_checks:
    name: GPU Checks
    runs-on: [self-hosted, GPU]
    timeout-minutes: 15

    steps:
    - uses: actions/checkout@v2

    - name: Set Docker tag
      run: |
        echo "DOCKER_TAG=$GITHUB_SHA" >> $GITHUB_ENV

    - name: Build test image
      run: |
        make docker-test-image DOCKER_TAG=$DOCKER_TAG

    - name: Run GPU tests
      run: |
        make docker-test-run DOCKER_TAG=$DOCKER_TAG ARGS='gpu-test'

  check_core:
    name: Check Core
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ['3.7', '3.8']

    steps:
    - uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python }}

    - uses: actions/cache@v2
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ runner.os }}-pydeps-${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ hashFiles('dev-requirements.txt') }}

    - name: Install requirements
      run: |
        make install

    - name: Debug info
      run: |
        pip freeze

    - name: Format
      if: always()
      run: |
        make format

    - name: Lint
      if: always()
      run: |
        make lint

    - name: Type check
      if: always()
      run: |
        make typecheck

    - name: Run tests
      if: always()
      run: |
        make test-with-cov

    - name: Ensure docs can build
      if: always()
      run: |
        make build-docs

    - name: Build core package
      if: matrix.python == '3.7'
      run: |
        echo "Building packages"
        # Just print out the version for debugging.
        make version
        python setup.py bdist_wheel sdist

    - name: Save core package
      if: matrix.python == '3.7'
      uses: actions/upload-artifact@v1
      with:
        name: core-package
        path: dist

    - name: Upload coverage to Codecov
      if: matrix.python == '3.7' && github.repository == 'allenai/allennlp'
      uses: codecov/codecov-action@v1
      with:
        file: ./coverage.xml
        # Ignore codecov failures as the codecov server is not
        # very reliable but we don't want to report a failure
        # in the github UI just because the coverage report failed to
        # be published.
        fail_ci_if_error: false

    - name: Clean up
      if: always()
      run: |
        pip uninstall --yes allennlp

  check_models:
    name: Check Models
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ['3.7', '3.8']

    steps:
    - uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python }}

    - uses: actions/cache@v2
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ runner.os }}-pydeps-${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ hashFiles('dev-requirements.txt') }}

    - name: Install requirements
      run: |
        make install

    - name: Debug info
      run: |
        pip freeze

    - name: Pull and install models repo
      env:
        ALLENNLP_VERSION_OVERRIDE: ""  # Don't replace the core library.
      run: |
        git clone https://github.com/allenai/allennlp-models.git
        cd allennlp-models
        pip install --upgrade --upgrade-strategy eager -e . -r dev-requirements.txt

    - name: Run models tests
      run: |
        cd allennlp-models && make test

    - name: Clean up
      if: always()
      run: |
        pip uninstall --yes allennlp allennlp-models

  # Tests installing from the distribution files.
  test_package:
    name: Test Package
    if: github.repository == 'allenai/allennlp'
    needs: [check_core]  # needs the package artifact created from 'check_core' job.
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ['3.7', '3.8']

    steps:
    - name: Setup Python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python }}

    - name: Install requirements
      run: |
        pip install --upgrade pip setuptools wheel

    - name: Download core package
      uses: actions/download-artifact@v1
      with:
        name: core-package
        path: dist

    - name: Install core package
      run: |
        pip install $(ls dist/*.whl)
        # In PyTorch 1.7, dataclasses is an unconditional dependency, when it should
        # only be a conditional dependency for Python < 3.7.
        # This has been fixed on PyTorch master branch, so we should be able to
        # remove this check with the next PyTorch release.
        pip uninstall -y dataclasses

    - name: Pip freeze
      run: |
        pip freeze

    - name: Test install
      run: |
        allennlp test-install
