from typing import Optional, Dict, Any, Iterator, Tuple, TypeVar, Callable, overload

from .parameter import Parameter

M = TypeVar('M', bound='Module')

class Module:
    def eval(self: M) -> M: ...

    training: bool

    def __call__(self, *input, **kwargs) -> Any: ...

    def state_dict(self,
                   destination: Optional[dict] = None,
                   prefix: str = '',
                   keep_vars: bool = False) -> Dict[str, Any]: ...

    def load_state_dict(self, state_dict: dict) -> None: ...

    def parameters(self) -> Iterator[Parameter]: ...

    def named_parameters(self,
                         memo: Optional[set] = None,
                         prefix: str = '') -> Iterator[Tuple[str, Parameter]]: ...

    def add_module(self, name: str, module: 'Module') -> None: ...

    def train(self: M, mode: bool = True) -> M: ...

    def cuda(self: M, cuda_device: int = -1) -> M: ...
    def cpu(self: M) -> M: ...
