from typing import Union, Any, overload, TypeVar

import torch

T = TypeVar('T', bound=torch._TensorBase)
V = torch.autograd.Variable
TV = Union[T, V]

# These bounds could be better using overloads
# (e.g. Tensor -> Tensor and Variable -> Variable)
def uniform(tensor: TV, a: float = 0., b: float = 1.) -> TV: ...
def normal(tensor: TV, mean: float = 0, std: float = 1) -> TV: ...
def constant(tensor: TV, val: Any) -> TV: ...
def eye(tensor: TV) -> TV: ...
def dirac(tensor: TV) -> TV: ...
def xavier_uniform(tensor: TV, gain: float = 1) -> TV: ...
def xavier_normal(tensor: TV, gain: float = 1) -> TV: ...
def kaiming_uniform(tensor: TV, a: float = 0, mode: str = 'fan_in') -> TV: ...
def kaiming_normal(tensor: TV, a: float = 0, mode: str = 'fan_in') -> TV: ...


@overload
def orthogonal(tensor: T, gain: float = 1) -> T: ...
@overload
def orthogonal(tensor: V, gain: float = 1) -> V: ...
def orthogonal(tensor: TV, gain: float = 1) -> TV: ...


def sparse(tensor: TV, sparsity: float, std: float = 0.01) -> TV: ...
